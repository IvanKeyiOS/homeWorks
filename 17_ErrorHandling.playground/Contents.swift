import UIKit

// MARK: - üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
 
// TODO: - üßë‚Äçüíª
/*
 –î–∞–≤–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏–º –∫–æ—Ä–∞–±–ª—å –≤ –∫—Ä—É–∏–∑.

 –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞—à –∫–æ—Ä–∞–±–ª—å.+
 –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ, –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —á–ª–µ–Ω–∞ —ç–∫–∏–ø–∞–∂–∞: –∫–∞–ø–∏—Ç–∞–Ω, –ø–æ–º–æ—â–Ω–∏–∫ –∫–∞–ø–∏—Ç–∞–Ω–∞, –º–µ—Ö–∞–Ω–∏–∫, –±–æ—Ü–º–∞–Ω, –¥–æ–∫—Ç–æ—Ä, –º–∞—Ç—Ä–æ—Å –∏ —Ç.–¥.+
 –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: –ø–æ–≤–∞—Ä, –≥–æ—Ä–Ω–∏—á–Ω–∞—è, –∞—Ä—Ç–∏—Å—Ç –∏ —Ç.–¥.+
 –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —á–ª–µ–Ω–∞ —ç–∫–∏–ø–∞–∂–∞. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.+

 –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∞–±–ª—å —Å–≤–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞. –°–≤–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è (private(set)).+
 –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ —á–ª–µ–Ω–∞ —ç–∫–∏–ø–∞–∂–∞.+
 –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞+

 –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∞–±–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø–ª—ã—Ç–∏–µ–º, —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ª–µ–¥—É—é—â–∏—Ö –æ—à–∏–±–æ–∫:
     ‚ÅÉ    –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞, –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ª—å–∫–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç.+
     ‚ÅÉ    –ï—Å–ª–∏ –Ω–∞ –∫–æ—Ä–∞–±–ª–µ –Ω–µ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞ –∏–ª–∏ –º–µ—Ö–∞–Ω–∏–∫–∞, –∫–æ—Ä–∞–±–ª—å –æ—Ç–ø–ª—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç. –°–æ–æ–±—â–∏—Ç–µ, –∫–æ–≥–æ –µ—â–µ –∂–¥–µ–º.+
     ‚ÅÉ    –ï—Å–ª–∏ —É –∫–æ–≥–æ-—Ç–æ –∏–∑ —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞ —Å—Ç–∞–∂ –º–µ–Ω—å—à–µ 3-—Ö –ª–µ—Ç, —Å–æ–æ–±—â–∏—Ç–µ –∫—Ç–æ —ç—Ç–æ.+

 –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ –∫–∞—é—Ç.+
 –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–ø–∏—Å—ã–≤–∞—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞.+
 –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∞–±–ª—å —Å–≤–æ–π—Å—Ç–≤–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–∞—é—Ç –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞.+
 –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∞–±–ª—å —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —á—Ç–µ–Ω–∏—è - –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.+
 –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –ø–æ—Å–∞–¥–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –Ω–∞ –∫–æ—Ä–∞–±–ª—å. –ï—Å–ª–∏ —É –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–∞, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç —Å–µ—Å—Ç—å –Ω–∞ –∫–æ—Ä–∞–±–ª—å. –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º.+
 
 –ò–∑–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∞–±–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø–ª—ã—Ç–∏–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Å –±–∏–ª–µ—Ç–∞–º–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—é—Ç –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫–∏—Ö –∫–∞—é—Ç –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
 –ò–∑–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∞–±–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø–ª—ã—Ç–∏–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 30% –æ—Ç–ø–ª—ã—Ç–∏–µ –±—ã–ª–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞. –í—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –µ—â–µ –Ω—É–∂–Ω–æ –Ω–∞–Ω—è—Ç—å.

 –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø–ª—ã—Ç–∏—é, –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.
 */

enum ShipError: Error {
    case missingCrewMember(roles: [CrewPosition])
    case notEnoughExperiencedCrew(members: [CrewMember])
    case notEnoughNumbersOfCrewMembers(required: Int, current: Int)
    case notEnoughNumbersOfCabins(shortages: [Cabin: Int])
    case notEnoughNumbersServiceStaff(required: Int, current: Int)
    case invalidPassengerTicket
}

enum CrewPosition: String {
    case captain = "Captain"
    case mechanic = "Mechanic"
    case mate = "Mate"
    case boatswain = "Boatswain"
    case doctor = "Doctor"
    case sailor = "Sailor"
}

enum ServiceCrewPosition {
    case cook
    case maid
    case artist
}

enum Cabin: String {
    case standard = "Standard"
    case deluxe = "Deluxe"
    case suite = "Suite"
    case economy = "Economy"
    case firstClass = "First Class"
    case vip = "VIP Suite"
}

struct ServiceCrew {
    let name: String
    let surname: String
    let position: ServiceCrewPosition
    let workExperience: Int
}

struct CrewMember {
    let name: String
    let surname: String
    let position: CrewPosition
    let workExperience: Int
}

struct Passenger {
    let name: String
    let surname: String
    let whatCabinTheyHave: Cabin
    let ticket: String
}

struct Ship {
    private(set) var crew: [CrewMember] = []
    private(set) var serviceCrew: [ServiceCrew] = []
    private(set) var passengers: [Passenger] = []
    
    var minimumCrewRequired: Int = 30
    
    var cabins: [Cabin: Int] = [.standard: 50,
                                .deluxe: 20,
                                .suite: 10,
                                .economy: 15,
                                .firstClass: 20,
                                .vip: 5
    ]
    
    // MARK: Add new member of crew
    mutating func addCrewMember(_ member: CrewMember) {
           crew.append(member)
       }

    // MARK: Add new member of service crew
    mutating func addServiceMember(_ member: ServiceCrew) {
        serviceCrew.append(member)
       }

    // MARK: Add new passenger on board
    mutating func addPassenger(_ passenger: Passenger)  {
        guard !passenger.ticket.isEmpty else {
            return print("–û—à–∏–±–∫–∞: —É –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–∞.")
        }
        passengers.append(passenger)
    }

    // MARK: Check wether ship has a captain and a mechanic
       func checkBeforeDeparture() throws {
           let requiredCrew = [
               CrewPosition.captain,
               CrewPosition.mechanic
           ]

           let missingRoles = requiredCrew.filter { role in
               !crew.contains(where: { $0.position == role })
           }

           if !missingRoles.isEmpty {
               throw ShipError.missingCrewMember(roles: missingRoles)
           }

           // MARK: Check enough work experience members of crew
           let inexperiencedCrew = crew.filter { $0.workExperience < 3 }
           if !inexperiencedCrew.isEmpty {
               throw ShipError.notEnoughExperiencedCrew(members: inexperiencedCrew)
           }

           // MARK: Check minimum numbers of crew members
           let minimumCrewCount = 10
           if crew.count < minimumCrewCount {
               throw ShipError.notEnoughNumbersOfCrewMembers(required: minimumCrewCount, current: crew.count)
           }

           // MARK: Check enough numbers cabins on the board
           var cabinShortages: [Cabin: Int] = [:]
           for cabinClass in cabins.keys {
               let requiredCabins = passengers.filter { $0.whatCabinTheyHave == cabinClass }.count
               if requiredCabins > cabins[cabinClass, default: 0] {
                   cabinShortages[cabinClass] = requiredCabins - cabins[cabinClass, default: 0]
               }
           }

           if !cabinShortages.isEmpty {
               throw ShipError.notEnoughNumbersOfCabins(shortages: cabinShortages)
           }

           // MARK: Check passengers and numbers service crew
           let maxPassengersPerServiceStaff = Int(Double(serviceCrew.count) * 1.3)
           if passengers.count > maxPassengersPerServiceStaff {
               let additionalStaffNeeded = Int(ceil(Double(passengers.count) / 1.3)) - serviceCrew.count
               throw ShipError.notEnoughNumbersServiceStaff(required: additionalStaffNeeded, current: serviceCrew.count)
           }

           print("–ö–æ—Ä–∞–±–ª—å –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø–ª—ã—Ç–∏—é. –ù–∞—á–∏–Ω–∞–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!")
       }
   }

var ship = Ship()

ship.addCrewMember(CrewMember(name: "John", surname: "Smith", position: .captain, workExperience: 25))
ship.addCrewMember(CrewMember(name: "Mike", surname: "Brown", position: .mechanic, workExperience: 10))
ship.addCrewMember(CrewMember(name: "Cris", surname: "Evans", position: .boatswain, workExperience: 22))
ship.addCrewMember(CrewMember(name: "Jared", surname: "Dadly", position: .doctor, workExperience: 15))
ship.addCrewMember(CrewMember(name: "Ben", surname: "Simons", position: .mate, workExperience: 11))
ship.addCrewMember(CrewMember(name: "Bruce", surname: "Hartly", position: .sailor, workExperience: 18))
ship.addCrewMember(CrewMember(name: "Adam", surname: "Bennet", position: .sailor, workExperience: 3))
ship.addCrewMember(CrewMember(name: "Adam", surname: "Bennet", position: .sailor, workExperience: 5))
ship.addCrewMember(CrewMember(name: "Adam", surname: "Bennet", position: .sailor, workExperience: 5))
ship.addCrewMember(CrewMember(name: "Adam", surname: "Bennet", position: .sailor, workExperience: 5))

ship.addServiceMember(ServiceCrew(name: "Harry", surname: "Cruse", position: .artist, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Drew", surname: "Bill", position: .cook, workExperience: 20))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))
ship.addServiceMember(ServiceCrew(name: "Derek", surname: "Carter", position: .maid, workExperience: 5))

ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
//ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: ""))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))
ship.addPassenger(Passenger(name: "Nicole", surname: "Lowrance", whatCabinTheyHave: .deluxe, ticket: "D20"))

do {
    try ship.checkBeforeDeparture()
} catch ShipError.missingCrewMember(let roles) {
    print("–ö–æ—Ä–∞–±–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø–ª—ã—Ç—å. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: \(roles.map { $0.rawValue }.joined(separator: ", "))")
} catch ShipError.notEnoughExperiencedCrew(let members) {
    let names = members.map { "\($0.name) \($0.surname)" }.joined(separator: ", ")
    print("–ù–∞ –∫–æ—Ä–∞–±–ª–µ –µ—Å—Ç—å —á–ª–µ–Ω—ã —ç–∫–∏–ø–∞–∂–∞ —Å –æ–ø—ã—Ç–æ–º –º–µ–Ω–µ–µ 3 –ª–µ—Ç: \(names)")
} catch ShipError.notEnoughNumbersOfCrewMembers(let required, let current) {
    print("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç \(required - current) —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞.")
} catch ShipError.notEnoughNumbersOfCabins(let shortages) {
    for (cabinClass, shortage) in shortages {
        print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—é—Ç –∫–ª–∞—Å—Å–∞ \(cabinClass.rawValue): —Ç—Ä–µ–±—É–µ—Ç—Å—è –µ—â–µ \(shortage) –∫–∞—é—Ç.")
    }
} catch ShipError.notEnoughNumbersServiceStaff(let required, let current) {
    print("–ö–æ—Ä–∞–±–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø–ª—ã—Ç—å. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–Ω—è—Ç—å –µ—â–µ \(required) —á–ª–µ–Ω–æ–≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.")
}

/*
 TODO: - ‚ùì –í–æ–ø—Ä–æ—Å—ã –∫ –∏–∑—É—á–µ–Ω–∏—é:
 - –ö–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–∑—ã–≤–∞—é—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–µ–π –∏ –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –µ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏?
 - –ö–∞–∫ –≤—ã–∑–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é?
 - –ó–∞—á–µ–º –Ω–∞–º –Ω—É–∂–µ–Ω do-catch –±–ª–æ–∫?
 - –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∏–ø Result?
 - –ß—Ç–æ –¥–µ–ª–∞–µ—Ç defer?
 */


