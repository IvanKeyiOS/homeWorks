import UIKit

// MARK: - üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
 
// TODO: - üßë‚Äçüíª
// –°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ String –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–æ trim, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤–Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ. –¢–∞–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –≤–Ω–∞—á–∞–ª–µ –∏/–∏–ª–∏ –∫–æ–Ω—Ü–µ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª. –ù–∞–º –Ω—É–∂–Ω–æ –æ—Ç—Å–µ—á—å –ø—Ä–æ–±–µ–ª—ã

extension String {
    var trim: String {
        self.trimmingCharacters(in: .whitespaces)
    }
}

let someString = " it is realy intresting            "
print("\"\(someString)\"")
print("\"\(someString.trim)\"")

// –î–æ–±–∞–≤—å—Ç–µ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ String –º–µ—Ç–æ–¥ truncate(length: Int), –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–µ—á–µ—Ç –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–Ω–µ–µ —á–µ–º length –∏ –∑–∞–º–µ–Ω–∏—Ç –∏—Ö –Ω–∞ ...

extension String {
    func truncate(length: Int, with changer: String = "...") -> String {
        guard self.count > length else { return self }

        let endIndex = self.index(self.startIndex, offsetBy: length - changer.count)
        return self[self.startIndex..<endIndex] + changer
    }
}

let myString = someString.truncate(length: 26, with: "...")
print(myString)

/* –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª EmployeeProtocol, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞:
 - –∏–º—è. –°–≤–æ–π—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
 - –≤–æ–∑—Ä–∞—Å—Ç
 - —Å—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã
 - –∑–∞—Ä–ø–ª–∞—Ç–∞ –±—Ä—É—Ç—Ç–æ
 - –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ—Ç—Ç–æ
 
 –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã:
 - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥—è—â–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞
 - –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥—è—â–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
*/

protocol EmployeeProtocol {
    var name: String { get }
    var age: Int { get set }
    var workExperience: Int { get set }
    var grossSalary: Int { get set}
    var netSalary: Int { get set }
    
    static func printInfoAboutClassName() -> String
    
    func printInfoAboutEmployee() -> String
}

/* –ù–∞–ø–∏—à–∏—Ç–µ —ç–∫—Å—Ç–µ–Ω—à–µ–Ω –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ "–∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ—Ç—Ç–æ", –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è –∏–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã –±—Ä—É—Ç—Ç–æ - –Ω–∞–ª–æ–≥ (21%).
 –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã.
 */

extension EmployeeProtocol {
    var tax: Int { return grossSalary * 21 / 100 }
    var salaryNet: Int { return grossSalary - tax }
}

// –°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –∫–ª–∞—Å—Å–∞ Driver –∏ Pilot, –ø–æ–¥—á–∏–Ω–∏—Ç–µ –∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª—É. –î–æ–±–∞–≤—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã.

class Driver: EmployeeProtocol {
    var name: String
    var age: Int
    var workExperience: Int
    var grossSalary: Int
    var netSalary: Int
    
    static func printInfoAboutClassName() -> String {
        "Name class is \(Driver.self)"
//        - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥—è—â–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞
    }
    
    func printInfoAboutEmployee() -> String{
        "Employee name is \(name), they are \(age) years old, with \(workExperience) years work experience, their salary is \(grossSalary) gross and \(netSalary) net"
//        - –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥—è—â–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    }
    
    init(name: String, age: Int, workExperience: Int, grossSalary: Int, netSalary: Int) {
        self.name = name
        self.age = age
        self.workExperience = workExperience
        self.grossSalary = grossSalary
        self.netSalary = netSalary
    }
    
}

class Pilot: EmployeeProtocol {
    var name: String
    var age: Int
    var workExperience: Int
    var grossSalary: Int
    var netSalary: Int
    
    static func printInfoAboutClassName() -> String {
        "Name class is \(Pilot.self)"
//        - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥—è—â–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞
    }
    
    func printInfoAboutEmployee() -> String {
        "Employee name is \(name), they are \(age) years old, with \(workExperience) years work experience, their salary is \(grossSalary) gross and \(netSalary) net"
//        - –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥—è—â–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    }
    
    init(name: String, age: Int, workExperience: Int, grossSalary: Int, netSalary: Int) {
        self.name = name
        self.age = age
        self.workExperience = workExperience
        self.grossSalary = grossSalary
        self.netSalary = netSalary
    }
    
}

// –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞.

Pilot.printInfoAboutClassName()
Driver.printInfoAboutClassName()

let pilot = Pilot(name: "John Smith", age: 33, workExperience: 5, grossSalary: 1200, netSalary: 1000)
let driver = Driver(name: "Sabine Smidt", age: 30, workExperience: 7, grossSalary: 3600, netSalary: 3000)

print(pilot.printInfoAboutEmployee())
print((driver.printInfoAboutEmployee()))
driver.salaryNet
pilot.salaryNet

/*
 TODO: - ‚ùì –í–æ–ø—Ä–æ—Å—ã –∫ –∏–∑—É—á–µ–Ω–∏—é:
 - –ß—Ç–æ –∑–Ω–∞—á–∏—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ?
 - –ö–∞–∫–æ–π –∫–ª–∞—Å—Å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–º –∏–ª–∏ —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å–æ–º, –∫–∞–∫–æ–π –ø–æ–¥–∫–ª–∞—Å—Å–æ–º –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–æ–º?
 - –í —á–µ–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ—Ö–∞–Ω–∏–∑–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è? –ß—Ç–æ –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å?
 - –ö–∞–∫ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ?
 - –ö–∞–∫ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç –∫–ª–∞—Å—Å–∞?
 */

