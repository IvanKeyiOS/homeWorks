import UIKit
/*
 MARK: - üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
 
 TODO: - üßë‚Äçüíª –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –†–µ—à–µ–Ω–∏–µ –ø–∏—à–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–∏—è:
 */

// - –û–±—ä—è–≤–∏—Ç–µ –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–µ—á–∞—Ç–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –î–æ–±–∞–≤—å—Ç–µ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.

func printHello() {
    print("Hello there!)")
}

printHello()

// - –û–±—ä—è–≤–∏—Ç–µ –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ - –∏–º—è, –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ parameter name only. –í—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é

let nameFirst: String = "Kate"
let nameDif: String = "Jennifer"

func printHelloForName(nameOnly: String) {
    print("Hello \(nameOnly)!)")
}

printHelloForName(nameOnly: nameDif)
printHelloForName(nameOnly: nameFirst)

// - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è argument label.

func printHelloForName(for nameOnly: String) {
    print("Hello \(nameOnly)!)")
}

printHelloForName(for: "Alex")
// - –û–±—ä—è–≤–∏—Ç–µ –º–∞—Å—Å–∏–≤ —Ç–∏–ø–∞ String —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –∫–∞–∂–¥–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –º–∞—Å—Å–∏–≤–∞ "!" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.

let nameArray: [String] = ["Paul", "John", "James", "Colin", "Bruce", "Richard", "Stephen"]

func addToEveryItemArray(array: [String]) -> [String] {
    var arrayWithAdd: [String] = []
    for i in array {
        arrayWithAdd.append(i + "!")
    }
    return arrayWithAdd
}
addToEveryItemArray(array: nameArray)
// - –ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∫–≤–æ–∑–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä inout.
var anotherNameArray: [String] = ["George", "Michael", "Shaquil", "Broony", "Andre", "Shauon", "David"]

func addSymbolToArray(array: inout [String]) -> [String] {
    var arrayWithAdd: [String] = []
    for i in array {
        arrayWithAdd.append(i + "!")
    }
    return arrayWithAdd
}
addSymbolToArray(array: &anotherNameArray)
// - –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–∏–ø–∞ Int –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
let firstParameter: Int = 7
let secondParameter: Int = 8
func sumTwoParameter(first: Int, second: Int) -> (Int) {
    first + second
}
let sum: Int = sumTwoParameter(first: firstParameter, second: secondParameter)
print(sum)

// - –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–∏–ø–∞ Int –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –º–∞—Å—Å–∏–≤–∞.

var numbersArray: [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
var someNumbersArray: [Int] = [4623964329052, 234239562305, 23434, 3243242, -324324, 3423432423]
func retrieveMaxAndMinValue(array: [Int]) -> (Int, Int) {
    
    let min: Int = array.min() ?? 0
    let max: Int = array.max() ?? 0
    
    return (min, max)
}
retrieveMaxAndMinValue(array: someNumbersArray)
retrieveMaxAndMinValue(array: numbersArray)

/*
 –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞–¥ –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –ø–æ —É—á–µ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ.
 –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö. –≠—Ç–æ –±—É–¥—É—Ç —Å—Ç—É–¥–µ–Ω—Ç—ã, –∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤ –Ω–∞—à —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç.
 –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –∑–∞—á–∏—Å–ª—è—Ç—å –µ–≥–æ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç. –°—Ä–µ–¥–∏–Ω–π –±–∞–ª –≤ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.
 –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª. –í –∏—Ç–æ–≥–µ –≤—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª.
 –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ª—É—á—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ä–µ—á–∏ –Ω–∞ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ –≤—ã–¥–∞—á–∏ –¥–∏–ø–ª–æ–º–æ–≤.
 –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ—á—å –ª—É—á—à–µ–≥–æ —É—á–µ–Ω–∏–∫–∞. –ü–æ–º–µ—Ç—å—Ç–µ, –∫—Ç–æ –µ–µ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç.
 –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É –¥–∏–ø–ª–æ–º (–≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å —Å –∏–º–µ–Ω–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–¥–∞—á–µ –µ–º—É –¥–∏–ø–ª–æ–º–∞).
 –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç—á–∏—Å–ª—è—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –í–µ–¥—å –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ –¥–∏–ø–ª–æ–º–æ–≤, —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –æ—Ç—á–∏—Å–ª–∏—Ç—å.
 –ù–∞–ø–æ–ª–Ω–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ –¥–æ–≤–µ–¥–∏—Ç–µ –∏—Ö –¥–æ –≤—ã–ø—É—Å–∫–∞!
 */
var applicantsDictionary: [String: Double] = ["Irwin": 0.0,
                                              "Hakim": 0.0,
                                              "Larry": 0.0,
                                              "Ray": 0.0,
                                              "Becky": 0.0,
                                              "Vanessa": 0.0,
                                              "Megan": 0.0,
                                              "Tray": 0.0,
                                              "Mike": 0.0,
                                              "JJ": 0.0]
print(applicantsDictionary)

/*–î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –∑–∞—á–∏—Å–ª—è—Ç—å –µ–≥–æ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç. –°—Ä–µ–¥–∏–Ω–∏–π –±–∞–ª –≤ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.*/

func admitApplicantsInUniversity() -> [String: Double]{
    var students = [String: Double]()
    for (name, grade) in applicantsDictionary {
        students[name] = grade
    }
    return students
}

admitApplicantsInUniversity()
var students = admitApplicantsInUniversity()
print(students)


/*–î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª. –í –∏—Ç–æ–≥–µ –≤—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª.*/

func giveAverageGrade() -> [String: Double] {
    var studentsAverageGrade = [String: Double]()
    for (name, grade) in students {
        let range: Double = Double.random(in: 4.5...5)
        studentsAverageGrade[name] = range
    }
    return studentsAverageGrade
}

giveAverageGrade()
var studentsAverageGrade = giveAverageGrade()
print(studentsAverageGrade)

/*  –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ª—É—á—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ä–µ—á–∏ –Ω–∞ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ –≤—ã–¥–∞—á–∏ –¥–∏–ø–ª–æ–º–æ–≤.*/

func defineTheBestStudent() -> (String){
    let maxValue = studentsAverageGrade.values.max() ?? 0.0
    var bestStudentName: String = ""
    for (name, grade) in studentsAverageGrade {
        if grade == maxValue {
            bestStudentName = name
            print("\(name) is the best student who will give speech at the graduation ceremony and his(she) grade is \(grade)")
        }
    }
    return (bestStudentName)
}
let bestStudent = defineTheBestStudent()

//–î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ—á—å –ª—É—á—à–µ–≥–æ —É—á–µ–Ω–∏–∫–∞. –ü–æ–º–µ—Ç—å—Ç–µ, –∫—Ç–æ –µ–µ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç.

func printTheSpeechTheBestStudent(bestStudent: String) {
            print("""
                  \tGood afternoon esteemed teachers, dear classmates, and respected guests. \nThank you for this incredible honor. \nI am deeply moved and will always remember this moment as a testament to what we can achieve together.\r\"\(bestStudent)\" gave the speech.
                  """)
        }
printTheSpeechTheBestStudent(bestStudent: bestStudent)

/* –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É –¥–∏–ø–ª–æ–º (–≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å —Å –∏–º–µ–Ω–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–¥–∞—á–µ –µ–º—É –¥–∏–ø–ª–æ–º–∞).*/

func giveDiplomaToStudent() {
    for (key, _) in students {
        print("The student \(key) received a diploma")
    }
}

giveDiplomaToStudent()


/*–î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç—á–∏—Å–ª—è—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –í–µ–¥—å –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ –¥–∏–ø–ª–æ–º–æ–≤, —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –æ—Ç—á–∏—Å–ª–∏—Ç—å.*/

func expelledStudentFromUniversity() {
    students.removeAll()
    print("Number of students at the university after graduation: \(students.count)")
}

expelledStudentFromUniversity()

/*
 TODO: - ‚ùì –í–æ–ø—Ä–æ—Å—ã –∫ –∏–∑—É—á–µ–Ω–∏—é (–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–µ –Ω—É–∂–Ω–æ, –Ω–æ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º –æ—Ç–≤–µ—Ç–∏—Ç—å):
 - –ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏?
 - –ß—Ç–æ —Ç–∞–∫–æ–µ argument label and parameter name?
 - –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–∫–≤–æ–∑–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä (inout)?
 - –ß—Ç–æ —Ç–∞–∫–æ–µ nested functions?
 */
