import UIKit
// MARK: - üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
// TODO: - üßë‚Äçüíª –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –†–µ—à–µ–Ω–∏–µ –ø–∏—à–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–∏—è:
// - –∏—Å–ø–æ–ª—å–∑—É—è while loop —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ "Hello" 5 —Ä–∞–∑

var word: Int = 1
while word <= 5 {
    print("\(word)Hello")
    word += 1
}

print("=======================================")

// - –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–æ–π –∂–µ –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª—å–∑—É—è repeat-while loop

word = 1
repeat {
    print("\(word)Hello")
    word += 1
} while word <= 5

// - –æ–±—ä—è–≤–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É—è switch statement —Å–¥–µ–ª–∞–π—Ç–µ –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏. –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
var string: String = "watermelon"

for i in string {
    switch i {
    case "a":
        string = string.replacingOccurrences(of: String("a"), with: "A")
    case "e":
        string = string.replacingOccurrences(of: String("e"), with: "E")
    case "o":
        string = string.replacingOccurrences(of: String("o"), with: "O")
    default:
        break
    }
}
    
print(string)
    
// - –æ–±—ä—è–≤–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ Int –∏ –Ω–∞–ø–∏—à–∏—Ç–µ switch, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ range.

let someNumber: Int = 18
    
switch someNumber {
case 1..<7:
    print("üê∂")
case 7...12:
    print("üê±")
case 13..<19:
    print("üêº")
case 19...24:
    print("ü¶Å")
default:
    print("üêµ")
}
    
// - –æ–±—ä—è–≤–∏—Ç–µ tuple —Å –¥–≤—É–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –Ω–∞–ø–∏—à–∏ switch –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π tuple
    
let somePerson: (String, Int) = ("Stephen", 35)
    
switch somePerson {
case ("Chris", 38):
    print("1")
case ("Paul", 34):
    print("2")
case ("Andre", 40):
    print("3")
case ("Stepen", 35):
    print("4")
case ("Stephen", 36):
    print("5")
case ("Stephen", 35):
    print("üèÄ")
    fallthrough
case ("Kobe", 24):
    print("üêç")
default:
    print("Error")
}
        
/*
 –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø—É—Å—Ç—å –±—É–¥–µ—Ç 3. –ö–∞–∂–¥—ã–π —Å—Ç—É–¥–µ–Ω—Ç –ø–æ—Å–µ—Ç–∏–ª 5 –∫—É—Ä—Å–æ–≤ –∏ –∏–º–µ–µ—Ç –±–∞–ª –ø–æ —ç—Ç–∏–º –∫—É—Ä—Å–∞–º, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª –∑–∞ –∫–∞–∂–¥—ã–π –∏–∑ —ç—Ç–∏—Ö –∫—É—Ä—Å–æ–≤. –í—ã—á–∏—Å–ª–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª —Å—Ç—É–¥–µ–Ω—Ç–∞ (–≤ —Å—É–º–º–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤) –∏ —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –†–µ–π—Ç–∏–Ω–≥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö –±–∞–ª–ª–æ–≤ –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è (–æ—Ç –ª—É—á—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫ —Ö—É–¥—à–µ–º—É).*/
    
let devinGrade: [String : Double] = ["History": 4.4, "English": 4.6, "Geography": 5.0, "Science": 4.2, "Maths": 4.5]
let kevinGrade: [String : Double] = ["History": 4.0, "English": 4.9, "Geography": 4.6, "Science": 4.3, "Maths": 4.4]
let bradleyGrade: [String : Double] = ["History": 4.8, "English": 4.7, "Geography": 4.5, "Science": 4.8, "Maths": 4.9]

for (subject, grade) in devinGrade {
    print("Devin's \(subject) grade: \(grade)")
}
var sumDevinGrade = 0.0
var countDevinCourse = devinGrade.count
for (key, value) in devinGrade {
    sumDevinGrade += value
}
    
let averageGradeDevin = sumDevinGrade / Double(countDevinCourse)
print("Devin's average grade: \(averageGradeDevin)")

for (subject, grade) in kevinGrade {
    print("Kevin's \(subject) grade: \(grade)")
}
var sumKevinGrade = 0.0
var countKevinCourse = kevinGrade.count
for (key, value) in kevinGrade {
    sumKevinGrade += value
}

let averageGradeKevin = sumKevinGrade / Double(countKevinCourse)
print("Kevin's average grade: \(averageGradeKevin)")

for (subject, grade) in bradleyGrade {
    print("Bradley's \(subject) grade: \(grade)")
}

var sumBradleyGrade = 0.0
var countBradleyCourse = bradleyGrade.count
for (key, value) in bradleyGrade {
    sumBradleyGrade += value
}

let averageGradeBradley = sumBradleyGrade / Double(countBradleyCourse)
print("Bradley's average grade: \(averageGradeBradley)")

var averageStudentsGrade: [String: Double] = [:]
averageStudentsGrade["Devin"] = averageGradeDevin
averageStudentsGrade["Kevin"] = averageGradeKevin
averageStudentsGrade["Bradley"] = averageGradeBradley

print(averageStudentsGrade)


for (key, value) in averageStudentsGrade {
  
}
let sortedValues = averageStudentsGrade.sorted { $0.value > $1.value }

print(sortedValues)


/*
 TODO: - ‚ùì –ö –∏–∑—É—á–µ–Ω–∏—é:
 - –í—ã—É—á–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è –≤—Å–µ—Ö statements and loops
 - –ó–Ω–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è continue, break, fallthrow, return, throw
 */
