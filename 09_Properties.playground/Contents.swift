import UIKit

// MARK: - üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.

// TODO: - üßë‚Äçüíª
/* 1.
 –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Student —Å–æ —Å–≤–æ–π—Å—Ç–≤–æ–º firstName. –î–æ–±–∞–≤—å—Ç–µ property observer –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞ firstName, —á—Ç–æ–±—ã –ø–µ—á–∞—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ.
 –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–ª–∞—Å—Å —Å–≤–æ–π—Å—Ç–≤–æ isValid, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏. –û–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.
 */

class Student {
    var firstName: String = "" {
        didSet {
            print("First name \"\(oldValue)\" was changed to \"\(firstName)\"")
        }
    }
    var isValid: Bool {
        if firstName.count >= 2 && firstName.count <= 15 {
            print("First name \"\(firstName)\" is valid")
        } else {
            print("First name \(firstName) is not valid")
        }
        return true
    }
    
    init(firstName: String) {
        self.firstName = firstName
    }
}

var name = Student(firstName: "John")
name.firstName = "Patrik"
name.isValid
name.firstName = "J"
name.isValid
name.firstName = "Ed"
name.isValid
name.firstName = "–ê–±–¥—É—Ä–∞—Ö–º–∞–Ω–≥–∞–¥–∂–∏"
name.isValid
name.firstName = "–ú–∞–∫–∞–¥—ç–≤–∞–∫–≤–∞–¥–æ–∫–≤—ç"
name.isValid

/* 2.
 –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Person —Å–æ —Å–≤–æ–π—Å—Ç–≤–æ–º age, —Ç–∏–ø–∞ Int. –î–æ–±–∞–≤—å—Ç–µ property observer –∫ —Å–≤–æ–π—Å—Ç–≤—É age, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 0.
 */

class Person {
    var age: Int = 0 {
        didSet {
            guard age <= oldValue else { return }
            age = oldValue
            print("Age should not be negative")
        }
    }
}

var person = Person()

person.age = -23
print(person.age)

/*
 –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Rectangle —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ width –∏ height. –î–æ–±–∞–≤—å—Ç–µ computed property —Å –∏–º–µ–Ω–µ–º area, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (width * height).
 */

struct Rectangle {
    var width: Double = 3.0
    var height: Double = 4.0
    var area: Double {
        return width * height
    }
}

var square = Rectangle()
print("Square is equal - \"\(square.area)\"")
square.height = 43.565
square.width = 32.253532
print("Square is equal - \"\(square.area)\"")

/*
 –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å User, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç.+
 –ò–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ –≤–æ–∑—Ä–∞—Å—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∏–ª–æ—Å—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è.+
 –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–ª–∞—Å—Å —Å–≤–æ–π—Å—Ç–≤–∞, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –æ–±—ä–µ–∫—Ç–∞ (3 —Å–≤–æ–π—Å—Ç–≤–∞ - –≤–µ—Å, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å). –ü—Ä–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞–∑–Ω–∏—Ü—ã –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤—É –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, —Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –µ—Å–ª–∏ –≤—ã—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ, —Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ).
 –ò–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ –≤–µ—Å —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏ –µ–º—É –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö—É–¥–µ–ª –∏–ª–∏ –ø–æ—Ç–æ—Å—Ç–µ–ª –æ–±—ä–µ–∫—Ç.+
 –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ User.+
 */

@propertyWrapper
struct RangedValue {
    private var weight: Int = 90
    private var min: Int
    private var max: Int
    
    var wrappedValue: Int {
        get {
            return weight
        }
        set {
            switch newValue {
            case ..<min:
                weight = min
            case min...max:
                weight = newValue
            default:
                weight = max }
        }
    }
    init(min: Int = 60, max: Int = 140) {
        self.min = min
        self.max = max
    }
}

class User {
    static var count: Int = 0
    var firstName: String = "Pieter"
    var secondName: String = "Van den Hoogenband"
    var age: Int = 46 {
        didSet {
            guard age != oldValue else { return }
            print("Happy Birthday!!!")
        }
    }
    var height: Int = 193
    @RangedValue(min: 60, max: 140) var weight: Int {
        didSet {
            guard weight != oldValue else { return}
            weight > oldValue ? print("Person gaining weight") : print("Person losing weight")
        }
    }
    @RangedValue(min: 60) var minWeight: Int
    @RangedValue(max: 140) var maxWeight: Int
    
    init(firstName: String, secondName: String, age: Int, height: Int, weight: Int, minWeight: Int, maxWeight: Int) {
        self.firstName = firstName
        self.secondName = secondName
        self.age = age
        self.height = height
        self.weight = weight
        self.minWeight = minWeight
        self.maxWeight = maxWeight
        User.count += 1
    }
}
RangedValue.init(min: 20, max: 500)
var newPerson = User(firstName: "Adwin", secondName: "Blake", age: 44, height: 185, weight: 85, minWeight: 55, maxWeight: 125)
newPerson.age = 47
newPerson.age = 47
newPerson.age = 48
newPerson.weight = 93
newPerson.weight = 53

print("How many are objects in class: \"User\" -> \(User.count)")

newPerson.minWeight = 300
print(newPerson.minWeight)
newPerson.weight = 25
print(newPerson.weight)
RangedValue.init(min: 20, max: 500)
var anotherUser = User(firstName: "Murray", secondName: "Andy", age: 40, height: 185, weight: 78, minWeight: 55, maxWeight: 135)
print("How many are objects in class: \"User\" -> \(User.count)")
anotherUser.weight = 98
print(anotherUser.weight)

/*
 –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
 
 –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É ‚Ññ2, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ—Ç—Ç–µ—Ä –∏ —Å–µ—Ç—Ç–µ—Ä –≤–º–µ—Å—Ç–æ property observer
 */

class SecondPerson {
    private var _age: Int
    var age: Int {
        get {
            if _age <= 0 {
                _age = 0
                print("Age should not be negative")
            }
            return _age
        }
        set {
            _age = newValue
        }
    }
    init(age: Int = 12) {
        _age = age
    }
}
var peter = SecondPerson()
peter.age = 12
print(peter.age)

/*
 TODO: - ‚ùì –í–æ–ø—Ä–æ—Å—ã –∫ –∏–∑—É—á–µ–Ω–∏—é:
 - –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É stored –∏ computed properties?
 - –ß—Ç–æ –∑–Ω–∞—á–∏—Ç lazy?
 - –ß—Ç–æ —Ç–∞–∫–æ–µ getter –∏ setter?
 - –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è property observers?
 - –ó–∞—á–µ–º –Ω—É–∂–Ω—ã –∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è property wrappers?
 */

